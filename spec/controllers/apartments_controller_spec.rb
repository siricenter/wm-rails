require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ApartmentsController, :type => :controller do

	# This should return the minimal set of attributes required to create a valid
	# Apartment. As you add validations to Apartment, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) {
		{number: 301, bed_count: 6, floor: 3}
	}

	let(:invalid_attributes) {
		{number: 301, bed_count: 7, floor: 3}
	}

	login_admin

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# ApartmentsController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "get index" do
		it "assigns all apartments as @apartments" do
			admin = FactoryGirl.create :admin
			sign_in admin

			apartment = FactoryGirl.create :apartment
			get :index, {building_id: apartment.building.to_param}, valid_session
			expect(assigns(:apartments)).to eq([apartment])
		end
	end

	describe "GET show" do
		it "assigns the requested apartment as @apartment" do
			apartment = FactoryGirl.create :apartment
			get :show, {:id => apartment.to_param}, valid_session
			expect(assigns(:apartment)).to eq(apartment)
		end
	end

	describe "GET new" do
		it "assigns a new apartment as @apartment" do
			building = FactoryGirl.create :building
			get :new, {building_id: building.to_param}, valid_session
			expect(assigns(:apartment)).to be_a_new(Apartment)
		end
	end

	describe "GET edit" do
		it "assigns the requested apartment as @apartment" do
			apartment = FactoryGirl.create :apartment
			get :edit, {:id => apartment.to_param}, valid_session
			expect(assigns(:apartment)).to eq(apartment)
		end
	end

	describe "POST create" do
		describe "with valid params" do
			it "creates a new Apartment" do
				building = FactoryGirl.create :building
				expect {
					post :create, {building_id: building.to_param, :apartment => valid_attributes}, valid_session
				}.to change(Apartment, :count).by(1)
			end

			it "assigns a newly created apartment as @apartment" do
				building = FactoryGirl.create :building
				post :create, {building_id: building.to_param, :apartment => valid_attributes}, valid_session
				expect(assigns(:apartment)).to be_a(Apartment)
				expect(assigns(:apartment)).to be_persisted
			end

			it "redirects to the created apartment" do
				building = FactoryGirl.create :building
				post :create, {building_id: building.to_param, :apartment => valid_attributes}, valid_session
				expect(response).to redirect_to(Apartment.last)
			end
		end

		describe "with invalid params" do
			it "assigns a newly created but unsaved apartment as @apartment" do
				building = FactoryGirl.create :building
				post :create, {building_id: building.to_param, apartment: invalid_attributes}, valid_session
				expect(assigns(:apartment)).to be_a_new(Apartment)
			end

			it "re-renders the 'new' template" do
				building = FactoryGirl.create :building
				post :create, {building_id: building.to_param, apartment: invalid_attributes}, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT update" do
		describe "with valid params" do
			let(:new_attributes) {
				{number: 401, bed_count: 8, floor: 4}
			}

			it "updates the requested apartment" do
				apartment = FactoryGirl.create :apartment
				put :update, {:id => apartment.to_param, :apartment => new_attributes}, valid_session
				apartment.reload
				expect(apartment.number).to eq(401)
				expect(apartment.bed_count).to eq(8)
				expect(apartment.floor).to eq(4)
			end

			it "assigns the requested apartment as @apartment" do
				apartment = FactoryGirl.create :apartment
				put :update, {:id => apartment.to_param, :apartment => valid_attributes}, valid_session
				expect(assigns(:apartment)).to eq(apartment)
			end

			it "redirects to the apartment" do
				apartment = FactoryGirl.create :apartment
				put :update, {:id => apartment.to_param, :apartment => valid_attributes}, valid_session
				expect(response).to redirect_to(apartment)
			end
		end

		describe "with invalid params" do
			it "assigns the apartment as @apartment" do
				apartment = FactoryGirl.create :apartment
				put :update, {:id => apartment.to_param, :apartment => invalid_attributes}, valid_session
				expect(assigns(:apartment)).to eq(apartment)
			end

			it "re-renders the 'edit' template" do
				apartment = FactoryGirl.create :apartment
				put :update, {:id => apartment.to_param, :apartment => invalid_attributes}, valid_session
				expect(response).to render_template("edit")
			end
		end
	end

	describe "DELETE destroy" do
		it "destroys the requested apartment" do
			apartment = FactoryGirl.create :apartment
			expect {
				delete :destroy, {:id => apartment.to_param}, valid_session
			}.to change(Apartment, :count).by(-1)
		end

		it "redirects to the apartments list" do
			apartment = FactoryGirl.create :apartment
			delete :destroy, {:id => apartment.to_param}, valid_session
			expect(response).to redirect_to(building_apartments_url(apartment.building))
		end
	end

end
