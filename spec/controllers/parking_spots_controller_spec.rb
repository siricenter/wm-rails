require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ParkingSpotsController, :type => :controller do

	# This should return the minimal set of attributes required to create a valid
	# ParkingSpot. As you add validations to ParkingSpot, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) {{
		number: 1
	}}

	let(:invalid_attributes) {{
		number: 'abc'
	}}

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# ParkingSpotsController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET index" do
		it "assigns all parking_spots as @parking_spots" do
			parking_spot = ParkingSpot.create! valid_attributes
			get :index, {}, valid_session
			expect(assigns(:parking_spots)).to eq([parking_spot])
		end
	end

	describe "GET show" do
		it "assigns the requested parking_spot as @parking_spot" do
			parking_spot = ParkingSpot.create! valid_attributes
			get :show, {:id => parking_spot.to_param}, valid_session
			expect(assigns(:parking_spot)).to eq(parking_spot)
		end
	end

	describe "GET new" do
		it "assigns a new parking_spot as @parking_spot" do
			get :new, {}, valid_session
			expect(assigns(:parking_spot)).to be_a_new(ParkingSpot)
		end
	end

	describe "GET edit" do
		it "assigns the requested parking_spot as @parking_spot" do
			parking_spot = ParkingSpot.create! valid_attributes
			get :edit, {:id => parking_spot.to_param}, valid_session
			expect(assigns(:parking_spot)).to eq(parking_spot)
		end
	end

	describe "POST create" do
		describe "with valid params" do
			it "creates a new ParkingSpot" do
				expect {
					post :create, {:parking_spot => valid_attributes}, valid_session
				}.to change(ParkingSpot, :count).by(1)
			end

			it "assigns a newly created parking_spot as @parking_spot" do
				post :create, {:parking_spot => valid_attributes}, valid_session
				expect(assigns(:parking_spot)).to be_a(ParkingSpot)
				expect(assigns(:parking_spot)).to be_persisted
			end

			it "redirects to the created parking_spot" do
				post :create, {:parking_spot => valid_attributes}, valid_session
				expect(response).to redirect_to(ParkingSpot.last)
			end
		end

		describe "with invalid params" do
			it "assigns a newly created but unsaved parking_spot as @parking_spot" do
				post :create, {:parking_spot => invalid_attributes}, valid_session
				expect(assigns(:parking_spot)).to be_a_new(ParkingSpot)
			end

			it "re-renders the 'new' template" do
				post :create, {:parking_spot => invalid_attributes}, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT update" do
		describe "with valid params" do
			let(:new_attributes) {{
				number: 2
			}}

			it "updates the requested parking_spot" do
				parking_spot = ParkingSpot.create! valid_attributes
				put :update, {:id => parking_spot.to_param, :parking_spot => new_attributes}, valid_session
				parking_spot.reload
				expect(parking_spot.number).to eq(2)
			end

			it "assigns the requested parking_spot as @parking_spot" do
				parking_spot = ParkingSpot.create! valid_attributes
				put :update, {:id => parking_spot.to_param, :parking_spot => valid_attributes}, valid_session
				expect(assigns(:parking_spot)).to eq(parking_spot)
			end

			it "redirects to the parking_spot" do
				parking_spot = ParkingSpot.create! valid_attributes
				put :update, {:id => parking_spot.to_param, :parking_spot => valid_attributes}, valid_session
				expect(response).to redirect_to(parking_spot)
			end
		end

		describe "with invalid params" do
			it "assigns the parking_spot as @parking_spot" do
				parking_spot = ParkingSpot.create! valid_attributes
				put :update, {:id => parking_spot.to_param, :parking_spot => invalid_attributes}, valid_session
				expect(assigns(:parking_spot)).to eq(parking_spot)
			end

			it "re-renders the 'edit' template" do
				parking_spot = ParkingSpot.create! valid_attributes
				put :update, {:id => parking_spot.to_param, :parking_spot => invalid_attributes}, valid_session
				expect(response).to render_template("edit")
			end
		end
	end

	describe "DELETE destroy" do
		it "destroys the requested parking_spot" do
			parking_spot = ParkingSpot.create! valid_attributes
			expect {
				delete :destroy, {:id => parking_spot.to_param}, valid_session
			}.to change(ParkingSpot, :count).by(-1)
		end

		it "redirects to the parking_spots list" do
			parking_spot = ParkingSpot.create! valid_attributes
			delete :destroy, {:id => parking_spot.to_param}, valid_session
			expect(response).to redirect_to(parking_spots_url)
		end
	end

end
