require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SemestersController, :type => :controller do

	# This should return the minimal set of attributes required to create a valid
	# Semester. As you add validations to Semester, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) {{
		name: "Spring Semester 2014", 
		rent: 1500,
		deposit: 50,
		duration: 1
	}}

	let(:invalid_attributes) {{
		name: "", 
		rent: 1500,
		deposit: 50,
		duration: 1
	}}

	login_admin

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# SemestersController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET index" do
		it "assigns all semesters as @semesters" do
			semester = FactoryGirl.create :semester
			get :index, {}, valid_session
			expect(assigns(:semesters)).to eq([semester])
		end
	end

	describe "GET show" do
		it "assigns the requested semester as @semester" do
			semester = FactoryGirl.create :semester
			get :show, {:id => semester.to_param}, valid_session
			expect(assigns(:semester)).to eq(semester)
		end
	end

	describe "GET new" do
		it "assigns a new semester as @semester" do
			get :new, {}, valid_session
			expect(assigns(:semester)).to be_a_new(Semester)
		end
	end

	describe "GET edit" do
		it "assigns the requested semester as @semester" do
			semester = FactoryGirl.create :semester
			get :edit, {:id => semester.to_param}, valid_session
			expect(assigns(:semester)).to eq(semester)
		end
	end

	describe "POST create" do
		describe "with valid params" do
			it "creates a new Semester" do
				expect {
					post :create, {:semester => valid_attributes}, valid_session
				}.to change(Semester, :count).by(1)
			end

			it "assigns a newly created semester as @semester" do
				post :create, {:semester => valid_attributes}, valid_session
				expect(assigns(:semester)).to be_a(Semester)
				expect(assigns(:semester)).to be_persisted
			end

			it "redirects to the created semester" do
				post :create, {:semester => valid_attributes}, valid_session
				expect(response).to redirect_to(Semester.last)
			end
		end

		describe "with invalid params" do
			it "assigns a newly created but unsaved semester as @semester" do
				post :create, {:semester => invalid_attributes}, valid_session
				expect(assigns(:semester)).to be_a_new(Semester)
			end

			it "re-renders the 'new' template" do
				post :create, {:semester => invalid_attributes}, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT update" do
		describe "with valid params" do
			let(:new_attributes) {{
				name: "Spring Semester 2014", 
				rent: 1500,
				deposit: 250,
				duration: 1
			}}

			it "updates the requested semester" do
				semester = FactoryGirl.create :semester
				put :update, {:id => semester.to_param, :semester => new_attributes}, valid_session
				semester.reload
				expect(semester.deposit).to eq(250)
			end

			it "assigns the requested semester as @semester" do
				semester = FactoryGirl.create :semester
				put :update, {:id => semester.to_param, :semester => valid_attributes}, valid_session
				expect(assigns(:semester)).to eq(semester)
			end

			it "redirects to the semester" do
				semester = FactoryGirl.create :semester
				put :update, {:id => semester.to_param, :semester => valid_attributes}, valid_session
				expect(response).to redirect_to(semester)
			end
		end

		describe "with invalid params" do
			it "assigns the semester as @semester" do
				semester = FactoryGirl.create :semester
				put :update, {:id => semester.to_param, :semester => invalid_attributes}, valid_session
				expect(assigns(:semester)).to eq(semester)
			end

			it "re-renders the 'edit' template" do
				semester = FactoryGirl.create :semester
				put :update, {:id => semester.to_param, :semester => invalid_attributes}, valid_session
				expect(response).to render_template("edit")
			end
		end
	end

	describe "DELETE destroy" do
		it "destroys the requested semester" do
			semester = FactoryGirl.create :semester
			expect {
				delete :destroy, {:id => semester.to_param}, valid_session
			}.to change(Semester, :count).by(-1)
		end

		it "redirects to the semesters list" do
			semester = FactoryGirl.create :semester
			delete :destroy, {:id => semester.to_param}, valid_session
			expect(response).to redirect_to(semesters_url)
		end
	end

end
