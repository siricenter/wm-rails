require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ContractsController, :type => :controller do

	# This should return the minimal set of attributes required to create a valid
	# Contract. As you add validations to Contract, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) {
		semesters = [FactoryGirl.create(:semester, name: Faker::Name.first_name).to_param]
		building = FactoryGirl.create :building
		{
			first_name: Faker::Name.first_name,
			last_name: Faker::Name.last_name,
			email: 'student1@byui.edu',
			home_address_1: Faker::Address.street_address,
			home_address_2: Faker::Address.secondary_address,
			home_city: Faker::Address.city,
			home_state: Faker::Address.state,
			home_zip: Faker::Address.zip,
			parking_type: "Private Covered",
			phone: Faker::PhoneNumber.phone_number,
			apartment_type: '8 Person',
			building_id: building.to_param,
			eligibility_sig: 'John Doe',
			living_standards_sig: 'John Doe',
			parking_ack: 'John Doe',
			contract_agreement: 'John Doe',
			preferences: '',
			number: '103',
			contract_semester_ids: semesters
		}
	}

	let(:invalid_attributes) {
		semesters = [FactoryGirl.create(:semester, name: Faker::Name.first_name).to_param]
		building = FactoryGirl.create :building
		{
			first_name: Faker::Name.first_name,
			last_name: Faker::Name.last_name,
			email: 'student1@gmail.com',
			home_address_1: Faker::Address.street_address,
			home_address_2: Faker::Address.secondary_address,
			home_city: Faker::Address.city,
			home_state: Faker::Address.state,
			home_zip: Faker::Address.zip,
			parking_type: "Private Covered",
			phone: Faker::PhoneNumber.phone_number,
			apartment_type: '8 Person',
			building_id: building.to_param,
			eligibility_sig: 'John Doe',
			living_standards_sig: 'John Doe',
			parking_ack: 'John Doe',
			contract_agreement: 'John Doe',
			preferences: '',
			number: '103',
			contract_semester_ids: semesters
		}
	}

	login_admin

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# ContractsController. Be sure to keep this updated too.
	let(:valid_session) { {} }

	describe "GET index" do
		it "assigns all contracts as @contracts" do
			contract = FactoryGirl.create :contract
			get :index, {}, valid_session
			expect(assigns(:contracts)).to eq([contract])
		end
	end

	describe "GET show" do
		it "assigns the requested contract as @contract" do
			contract = FactoryGirl.create :contract
			get :show, {:id => contract.to_param}, valid_session
			expect(assigns(:contract)).to eq(contract)
		end
	end

	describe "GET new" do
		it "assigns a new contract as @contract" do
			building = FactoryGirl.create :building
			get :new, {building_id: building.to_param}, valid_session
			expect(assigns(:contract)).to be_a_new(Contract)
		end
	end

	describe "GET edit" do
		it "assigns the requested contract as @contract" do
			contract = FactoryGirl.create :contract
			get :edit, {:id => contract.to_param}, valid_session
			expect(assigns(:contract)).to eq(contract)
		end
	end

	describe "POST create" do
		describe "with valid params" do
			it "creates a new Contract" do
				expect {
					post :create, {:contract => valid_attributes}, valid_session
				}.to change(Contract, :count).by(1)
			end

			it "assigns a newly created contract as @contract" do
				post :create, {:contract => valid_attributes}, valid_session
				expect(assigns(:contract)).to be_valid
				expect(assigns(:contract)).to be_a(Contract)
				expect(assigns(:contract)).to be_persisted
			end

			it "redirects to the root page" do
				post :create, {:contract => valid_attributes}, valid_session
				expect(response).to redirect_to(root_path)
			end
		end

		describe "with invalid params" do
			it "assigns a newly created but unsaved contract as @contract" do
				post :create, {:contract => invalid_attributes}, valid_session
				expect(assigns(:contract)).to be_a_new(Contract)
			end

			it "re-renders the 'new' template" do
				post :create, {:contract => invalid_attributes}, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT update" do
		describe "with valid params" do
			let(:new_attributes) {
				semesters = [FactoryGirl.create(:semester, name: Faker::Name.first_name).to_param]
				building = FactoryGirl.create :building
				{
					first_name: Faker::Name.first_name,
					last_name: Faker::Name.last_name,
					email: 'student1@byui.edu',
					home_address_1: Faker::Address.street_address,
					home_address_2: Faker::Address.secondary_address,
					home_city: Faker::Address.city,
					home_state: Faker::Address.state,
					home_zip: Faker::Address.zip,
					parking_type: "Private Covered",
					phone: Faker::PhoneNumber.phone_number,
					apartment_type: '8 Person',
					building_id: building.to_param,
					eligibility_sig: 'John Doe',
					living_standards_sig: 'John Doe',
					parking_ack: 'John Doe',
					contract_agreement: 'John Doe',
					preferences: '',
					number: '103',
					contract_semester_ids: semesters
				}}

			it "updates the requested contract" do
				contract = FactoryGirl.create :contract
				put :update, {:id => contract.to_param, :contract => new_attributes}, valid_session
				contract.reload
				expect(contract.parking_type).to eq("Tandem Covered")
			end

			it "assigns the requested contract as @contract" do
				contract = FactoryGirl.create :contract
				put :update, {:id => contract.to_param, :contract => valid_attributes}, valid_session
				expect(assigns(:contract)).to eq(contract)
			end

			it "redirects to the contract" do
				contract = FactoryGirl.create :contract
				put :update, {:id => contract.to_param, :contract => valid_attributes}, valid_session
				expect(response).to redirect_to(contract)
			end
		end

		describe "with invalid params" do
			it "assigns the contract as @contract" do
				contract = FactoryGirl.create :contract
				put :update, {:id => contract.to_param, :contract => invalid_attributes}, valid_session
				expect(assigns(:contract)).to eq(contract)
			end

			it "re-renders the 'edit' template" do
				contract = FactoryGirl.create :contract
				put :update, {:id => contract.to_param, :contract => invalid_attributes}, valid_session
				expect(response).to render_template("edit")
			end
		end
	end


	describe "DELETE destroy" do
		it "destroys the requested contract" do
			contract = FactoryGirl.create :contract
			expect {
				delete :destroy, {:id => contract.to_param}, valid_session
			}.to change(Contract, :count).by(-1)
		end

		it "redirects to the contracts list" do
			contract = FactoryGirl.create :contract
			delete :destroy, {:id => contract.to_param}, valid_session
			expect(response).to redirect_to(contracts_url)
		end
	end

end
